
//-------------------------------------------------------------------
// マクロ名: mucom_MMLplayer.mac
// 機能    ：MMLファイル上でコマンドライン版MUCOM88の制御を行う
// 製作者  ：@overgo
// 導入方法：
//      ①公式サイトからMUCOM88 Windowsをダウンロード。 https://onitama.tv/mucom88/
//      ②ダウンロードしたzipファイルを任意の場所に展開する。
//      ③本マクロの$MUCOM88_Dirにmucom88.exeのあるフォルダパスを記述。
//      ④演奏用のMUCOM88向けMMLファイル（*.muc）を自作するなどして用意する。
//
// 使用方法：
//      演奏：①MMLファイル上で本マクロを実行。
//            ②演奏が終了したら（あるいは中断する場合）、[Ctrl + C] でDOS窓を閉じる。
//
//            編集中、または新規作成中ファイルでも可。
//
//      WAV出力：①既存のMMLファイルに拡張タグ #time を記述。（演奏は省略される）
//               ②MMLファイル上で本マクロを実行。（即時WAVファイルが作成される）
//
//               ※ #time 60 のようにパラメータを記述すれば録音時間のデフォルト値を設定可能。
//               ※ 新規作成の場合はmucom88.exeと同じフォルダにWAVファイルを出力する。
//
//      VGM/S98ファイル出力：
//               ①既存のMMLファイルに拡張タグ #logfile を記述。（演奏は省略される）
//               ②パラメータに vgm または s98 を記述し、MMLファイル上で本マクロを実行。
//
//               ※ 出力時間はWAV出力の #time タグのパラメータを共有する。
//               ※ パラメータを省略した場合はWAV出力が優先的に動作する。
//
//      ミュート機能：
//               ①MMLファイルに拡張タグ #mute を記述。
//               ②演奏またはファイル出力を実行する。
//
//               ※ テンポを記述したトラックをミュートした場合でも、最初に記述されている
//                  テンポで演奏される。（テンポチェンジには未対応）
//               ※ パラメータとして演奏するトラック名を記述することで、未記述のトラックを
//                  ミュートさせることが可能。（例： #mute ABC ）
//
//      ドライバ選択：
//               ①MMLファイルにタグ #driver をパラメータなしで記述。
//               ②マクロ実行時に表示されるドライバ名を選択。
//
// 動作確認 :Windows10 Home，秀丸エディタ Ver 8.88 64bit統合版
//           MUCOM88 for Windows 2020/03/15リリース版
// 更新履歴 : 2020/05/16 Ver 1.10  コンパイルのエラー時、エラー行へジャンプする機能を実装。
//-------------------------------------------------------------------

	//==================================================

	// ----------【システム設定項目 ※固定】----------

	// タグ定義
	$Tag_Voice   = "#voice";    // FM音色ファイルタグ
	$Tag_Pcm     = "#pcm";      // ADPCMファイルタグ
	$Tag_OutTime = "#time";     // ファイル出力時間
	$Tag_Driver  = "#driver";   // ドライバ設定
	// [独自拡張タグ]
	$Tag_LogFile = "#logfile";  // VGM/S98出力設定
	$Tag_Mute    = "#mute";     // ミュート設定

	// ドライバ選択用
	$DrvNameLst[0] = "mucom88";
	$DrvNameLst[1] = "mucom88E";
	$DrvNameLst[2] = "mucom88EM";
	$DrvNameLst[3] = "mucomDotNET";
	#DrvNameNum    = 4; // 上記ドライバ名の登録数


	// メッセージおよびデバッグ用のマクロ名およびバージョン
	$MacName = "mucom_MMLplayer.mac (v1.09)";


	// ----------【ユーザ設定項目 ※編集可】----------

	// mucom88.exeのあるフォルダ（※「\」は「\\」と記述）
	$MUCOM88_Dir = "C:\\_userApp\\mucom88";

	// 標準音色ファイル名
	$DefVoiceName = "voice.dat";

	// 標準pcmファイル名
	$DefPcmName = "mucompcm.bin";

	// 一時MMLファイル名
	$TmpMucName = "_tmp.muc";

	// 一時バイナリファイル名
	$BinName = "_tmp.mub";

	// 新規作成の場合に出力するファイル名（拡張子なし）
	$DefNewName = "_new";


	//==================================================
	call _DEBUG "==========【マクロ開始】==========";

	//------------------------------
	// コンパイルの準備（初期処理）
	//------------------------------

	// タグ検索結果の行位置をリセット
	#FoundLineNo = 0;

	// 実行ファイルのパスを作成
	$AppName = "mucom88.exe";
	$Chk = rightstr( $MUCOM88_Dir, 1 );
	if( "\\" != $Chk ) $MUCOM88_Dir = $MUCOM88_Dir + "\\";
	$AppPath = $MUCOM88_Dir + $AppName;

	// 実行ファイルの存在チェック
	#Ret = existfile( $AppPath );
	if( false == #Ret )
	{
		$ErrMsg = "\"" + $AppPath + "\" が存在しません。（$MUCOM88_Dir の記述を確認してください）";
		call _DEBUG "【エラー】初期処理：実行ファイルパスなし：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x10;
		goto END;
	}

	// ファイルタイプの取得
	$FileType = filetype;
	if(( ".mub" == $FileType )||( ".MUB" == $FileType ))
	{
		// MUBファイルなら演奏のみ対応する
		$BinPath = filename2;
		call _DEBUG "初期処理：MUBファイルを検出。：" + $BinPath;
		call _ExcMucom "-d ", $BinPath, "演奏処理(MUBファイル直接指定)";
		goto END;
	}

	// 現在の文字コードをチェック
	#Encode = encode & 0x3F;
	if( 26 == #Encode )
	{
		$ErrMsg = "現在バイナリモードで開いています。MUBファイル以外ではマクロを実行できません。";
		call _DEBUG "【エラー】初期処理：バイナリモード：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x10;
		goto END;
	}

	// MMLと思わしきファイルまたは新規作成以外は実行しない
	if(   ( ".muc" != $FileType )
		&&( ".MUC" != $FileType )
		&&( ".mml" != $FileType )
		&&( ".MML" != $FileType )
		&&( ".txt" != $FileType )
		&&( ".TXT" != $FileType )
		&&( "new"  != $FileType ) )
	{
		$ErrMsg = "MUCOM88用MMLファイル（*.muc）で実行してください。";
		call _DEBUG "【エラー】初期処理：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x10;
		goto END;
	}

	// MMLファイルが書き込み可能な場合
	if( (!readonly)&&(!browsemode) )
	{
		// 【オマケ機能】空のファイルの場合はクリップボードからの貼り付けを試行
		if( (linecount2 == 1)&&(linelen2 == 0) )
		{
			paste;
			call _EditNewMML;
		}
	}
	else
	{
		// MMLファイルが書き込み不可であれば警告（エラーにはしない）
		$ErrMsg = "現在、読み取り専用でMMLファイルを開いています。";
		call _DEBUG "【警告】初期処理：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x30;
	}

	// MMLファイル名からファイル名のベースを作成（新規作成であれば長さ０）
	$BaseName = leftstr( basename2, strlen( basename2 ) - strlen( $FileType ) );

	// 一時ファイル用のテキストを作成
	call _SetMmlTxt;


	// ========== 各種タグの存在チェック ==========
	// driverタグチェック
	call _DEBUG "driverタグチェック：$Tag_Driver=" + $Tag_Driver;
	call _GetMmlTag $Tag_Driver, linecount2;
	$TagSts_Driver = $$return;
	$DriverName = "*default*"; // 標準出力用に初期化
	if( 0 < strlen($TagSts_Driver) )
	{
		// タグの再編集用に検出した位置を記憶しておく
		#DriverTagLNo = #FoundLineNo;

		// ドライバタグのパラメータが空ならドライバ選択メニューを表示
		if( " " == $TagSts_Driver )
		{
			// MMLファイルが書き込み可能であれば編集可
			if( (!readonly)&&(!browsemode) )
			{
				menu
					"【ドライバの選択】",
					"\x01",
					"(&0) #driver " + $DrvNameLst[0] + "　\t" + "MUCOM88 1.7（デフォルト）",
					"(&1) #driver " + $DrvNameLst[1] + "　\t" + "MUCOM88 1.5",
					"(&2) #driver " + $DrvNameLst[2] + "　\t" + "MUCOM88em（メモリ拡張版）",
					"(&3) #driver " + $DrvNameLst[3] + "　\t" + "mucomDotNETによるコンパイルと演奏";

				#Ret = result;
				if( 1 == #Ret ) #Ret = 3; // キャプションが選択されたらデフォルト

				if( ((3 <= #Ret)&&(#Ret <= 6)) ||(1 == #Ret) )
				{
					// ドライバ名をセット
					$DriverName = $DrvNameLst[#Ret - 3];
					call _EditTag $Tag_Driver, $DriverName, #DriverTagLNo;

					// ドライバタグを編集したら一時ファイル用のテキストを再作成
					call _SetMmlTxt;
					call _DEBUG "【ドライバ選択（MENU）】：$DriverName = [" + $DriverName + "]";
				}
			}
		}
		else
		{

			// ドライバ選択タグの正当性チェック
			#i = 0;
			#Sts = false;
			while( #i < #DrvNameNum )
			{
				if( $TagSts_Driver == $DrvNameLst[#i] )
				{
					// ドライバ名を取得
					$DriverName = $TagSts_Driver;

					#Sts = true;
					call _DEBUG "【ドライバ選択（TAG）】：$DriverName = [" + $DriverName + "]";
					break;
				}

				#i = #i + 1;
			}

			// 不明なドライバが記述されている場合は警告
			if( false == #Sts )
			{
				$ErrMsg = "タグ " + $Tag_Driver + " に記述されている \"" + $TagSts_Driver + "\" は不明なドライバ名です。";
				call _DEBUG "【警告】ドライバ選択：" + $ErrMsg;
				message $ErrMsg, $MacName, 0x30;
			}
		}
	}

	// voiceタグチェック
	call _DEBUG "voiceタグチェック：$Tag_Voice=" + $Tag_Voice;
	call _GetMmlTag $Tag_Voice, linecount2;
	call _TrmSub $$return; // 余白は削除
	$TagSts_Voice = $$return;

	// pcmタグチェック
	call _DEBUG "pcmタグチェック：$Tag_Pcm=" + $Tag_Pcm;
	call _GetMmlTag $Tag_Pcm, linecount2;
	call _LTrmSub $$return; // 余白は削除
	$TagSts_Pcm = $$return;

	// VGM/S98出力タグチェック
	call _DEBUG "VGM/S98出力タグチェック：$Tag_LogFile=" + $Tag_LogFile;
	call _GetMmlTag $Tag_LogFile, linecount2;
	$TagSts_LogFile = $$return;

	// ミュートタグチェック
	call _DEBUG "拡張タグチェック：$Tag_Mute=" + $Tag_Mute;
	$Opt_Mute = "";
	call _GetMmlTag $Tag_Mute, linecount2;
	$TagSts_Mute = $$return;
	if( 0 < strlen($TagSts_Mute) )
	{
		// タグの再編集用に検出した位置を記憶しておく
		#MuteTagLNo = #FoundLineNo;
	}

	// 出力時間タグチェック
	call _DEBUG "拡張タグチェック：$Tag_OutTime=" + $Tag_OutTime;
	$Opt_FileOut = "";
	call _GetMmlTag $Tag_OutTime, linecount2;
	$TagSts_OutTime = $$return;

	// ファイル出力が有効であれば、演奏処理は実行しない（排他制御）
	if( 0 < strlen($TagSts_OutTime) )
	{
		//------------------------------
		// ファイル出力処理の準備
		//------------------------------
		call _DEBUG "ファイル出力：タグ\"" + $Tag_OutTime + "\" を検出。$TagSts_OutTime=" + $TagSts_OutTime;

		// タグの再編集用に検出した位置を記憶しておく
		#TimeTagLNo = #FoundLineNo;

		// 新規作成の場合
		if( 0 == strlen( $BaseName ) )
		{
			// 代替ファイル名で保存する
			$BaseName = $DefNewName;
			$OutFilePath = $MUCOM88_Dir;
			call _DEBUG "ファイル出力：新規作成ファイル, $BaseName=" + $BaseName;
		}
		else
		{
			// 既存MMLファイルであれば、出力先は自ファイルのカレントディレクトリ
			$OutFilePath = leftstr( filename2, strlen(filename2) - strlen(basename2) );
		}

		// ログファイル出力が指定されていた場合はVGM/S98の判定
		if( 0 < strlen($TagSts_LogFile) )
		{
			if( ( "s98" == $TagSts_LogFile )||( "S98" == $TagSts_LogFile ) )
			{
				$OutFName = $BaseName + ".s98";
				$DspFType = "S98";
				call _DEBUG "ファイル出力：S98ログ作成, $BaseName=" + $BaseName;
			}
			else if( ( "vgm" == $TagSts_LogFile )||( "VGM" == $TagSts_LogFile ) )
			{
				$OutFName = $BaseName + ".vgm";
				call _DEBUG "ファイル出力：VGMファイル作成, $BaseName=" + $BaseName;
				$DspFType = "VGM";
			}
			else
			{
				// それ以外はWAVファイルとする
				$OutFName = $BaseName + ".wav";
				call _DEBUG "ファイル出力：WAVファイル作成, $BaseName=" + $BaseName;
				$DspFType = "WAV";
			}
		}
		else
		{
			// それ以外はWAVファイルとする
			$OutFName = $BaseName + ".wav";
			$DspFType = "WAV";
			call _DEBUG "ファイル出力：WAVファイル作成, $BaseName=" + $BaseName;
		}

		// ファイル出力先のパスを確定
		$OutFilePath = $OutFilePath + $OutFName;

		// 出力時間タグのパラメータ値が記述されている場合は取得
		#OutTimeSec = 0;
		if( " " != $TagSts_OutTime )
		{
			// とりあえず数値に変換して範囲チェック
			#OutTimeSec = val( $TagSts_OutTime );
			if( #OutTimeSec < 0 )
			{
				#OutTimeSec = 0;
			}
			else if( 9999 < #OutTimeSec )
			{
				#OutTimeSec = 9999;
			}
		}
		else
		{
			// デフォルトは90秒
			#OutTimeSec = 90;
		}

		beep;
		call _DEBUG "ファイル出力：ユーザ入力開始";

		// 入力メニューの表示
		call _DspSetTime "【" + $DspFType + "ファイル出力時間の設定】 " + $OutFName, 0, 9999, #OutTimeSec;
		$FileTimeStr = $$return;
		if( 0 < strlen( $FileTimeStr ) )
		{
			// 出力ファイル別にコマンドラインのオプションを作成
			if( "WAV" == $DspFType )
			{
				// WAV出力用（ -wオプション ）
				$Opt_FileOut = "-x -w " + $OutFilePath + " -l " + $FileTimeStr + " ";
			}
			else
			{
				// ログ出力用（ -bオプション ）
				$Opt_FileOut = "-x -b " + $OutFilePath + " -l " + $FileTimeStr + " ";
			}

			call _DEBUG "ファイル出力：出力時間確定 $Opt_FileOut=\"" + $Opt_FileOut + "\"";
		}
		else
		{
			call _DEBUG "ファイル出力：ユーザによるキャンセル（処理中止）";
			goto END;
		}
	}

	//------------------------------
	//  ミュートオプション処理
	//------------------------------
	// ミュートオプションが有効であれば、設定メニューを表示
	if( 0 < strlen($TagSts_Mute) )
	{
		call _DEBUG "ミュートオプション：タグ\"" + $Tag_Mute + "\" を検出。";
		#Ret = 2; //セパレータの値
		call _MuteDspChg -1; // ミュート表示のリセット

		// ミュートタグのパラメータ値が記述されている場合は選択状態に反映する
		if( " " != $TagSts_Mute )
		{
			call _DEBUG "ミュート：タグ\"" + $Tag_Mute + "\" を検出。$TagSts_Mute=" + $TagSts_Mute;

			// トラック名が記述されていなければミュートON
			#k = 0;
			while( #k < 11 )
			{
				$TrName = midstr( "ABCDEFGHIJK", #k, 1 );
				if( 0 > strstr( $TagSts_Mute, $TrName ) )
				{
					// 表示を反転（ミュート）
					call _MuteDspChg #k;
				}

				#k = #k + 1;
			}
		}

		// ファイル出力秒数のユーザ入力メニューを表示（ループ処理）
		while((1 < #Ret)&&(#Ret < 15) )
		{
			call _Sec2TimeSub #InpVal;
			$DspTime = $$return;

			menu
				"【ミュートの設定】",
				"\x01",
				$DspMuteF[0]  + "(&A)　" + " [ FM1 ] ",
				$DspMuteF[1]  + "(&B)　" + " [ FM2 ] ",
				$DspMuteF[2]  + "(&C)　" + " [ FM3 ] ",
				$DspMuteF[3]  + "(&D)　" + " [SSG-1] ",
				$DspMuteF[4]  + "(&E)　" + " [SSG-2] ",
				$DspMuteF[5]  + "(&F)　" + " [SSG-3] ",
				$DspMuteF[6]  + "(&G)　" + " [RtmTR] ",
				$DspMuteF[7]  + "(&H)　" + " [ FM4 ] ",
				$DspMuteF[8]  + "(&I)　" + " [ FM5 ] ",
				$DspMuteF[9]  + "(&J)　" + " [ FM6 ] ",
				$DspMuteF[10] + "(&K)　" + " [ADPCM] ",
				"リセット(&R) ",
				"決定(&O)",
				"キャンセル(&X)"; // #Ret = 16

			#Ret = result;
			if( (3 <= #Ret)&&(#Ret <= 13) )
			{
				// Shiftキーを押しながらの場合はソロ指定
				if( iskeydown( 0x10 ) ) call _MuteDspChg -10; // いったん全ミュートする

				// ミュートフラグのトグル動作
				call _MuteDspChg (#Ret - 3);
			}
			else if( 14 == #Ret )
			{
				// (R)リセット
				call _MuteDspChg -1;
			}
			else if( 16 == #Ret )
			{
				// (X)キャンセル
				#Ret = 0; // ZEROで上書き
				$TagSts_Mute = "";
				call _DEBUG "ミュートオプション：ユーザによるキャンセル（処理続行）";
			}
		}

		/* 「決定」の場合は一括置換用の検索ワードを作成 */
		$MuteEditStr = "";
		if( (1 == #Ret)||(15 == #Ret) )
		{
			$RepKey = "";
			#i = 0;
			while( #i < 11 )
			{
				// ミュート状態を反映
				$TrName = midstr( "ABCDEFGHIJK", #i, 1 );
				if( "●" != $DspMuteF[#i] )
				{
					// ミュート（コメントアウト）するトラックを検索ワードに結合していく
					$RepKey = $RepKey + "|^" + $TrName +  " ";
				}
				else
				{
					// ミュートOFFのトラック名をタグ再編集用に結合していく
					$MuteEditStr = $MuteEditStr + $TrName;
				}

				#i = #i + 1;
			}

			if( 0 < strlen($RepKey) )
			{
				// 検索ワードは最終的に先頭の "|" を無視して1文字後ろから適用
				$RepKey = "(" + midstr( $RepKey, 1 ) + ")";
				call _DEBUG "ミュートオプション：検索ワード = \"" + $RepKey + "\"";
			}
		}
	}

	//------------------------------
	//  コンパイル処理
	//------------------------------

	// 復帰用にMMLファイルのハンドルを保存
	#MyHdl = hidemaruhandle( 0 );

	// コンパイル用の一時MMLファイルを作成
	$TmpMucPath = $MUCOM88_Dir + $TmpMucName;
	call _DEBUG "[MUCOM88] コンパイル用の一時MMLファイル作成：" + $TmpMucPath;

	// MMLファイルの内容を丸コピー
	newfile; // ファイルオープン
	setwindowsize 0,0;
	insert $MML_Txt;

	// ミュートオプション処理
	if( 0 < strlen($RepKey) )
	{
		// テンポの記述がミュートされた場合の応急処置として、演奏開始時のテンポを取得。
		// ※テンポチェンジには対応できない
		call _GetTempo linecount2;
		$Tempo = $$return;
		call _DEBUG "[MUCOM88] ミュートオプション処理：$Tempo=" + $Tempo;

		// 高速一括置換でミュートするトラックをコメントアウト
		disabledraw;                // 「処理中」は表示しない
		setcompatiblemode 0x20000;  // マクロ終了後に検索条件をリセットする

		// 行番号の削除
		replaceallfast "^[^']*'", "", regular;
		// ミュート行のコメントアウト
		replaceallfast $RepKey, ";\\1", regular;

		enabledraw; // 置換処理完了

		// 一時ファイル行頭にテンポ設定を挿入
		moveto 0,0;
		insert "G " + $Tempo + "\n";
	}

	// 一時ファイルを保存し、元のMMLファイルをアクティブにする
	saveas $TmpMucPath;             // 一時ファイルを上書き保存
	#NewHdl = hidemaruhandle( 0 );  // ウィンドウハンドルを保存
	setactivehidemaru #MyHdl;       // MMLファイルに戻る
	closehidemaru #NewHdl;          // 一時ファイルを閉じる
	deletefilehist;                 // 一時ファイルの履歴を削除

	// 一時バイナリファイルを削除
	$BinPath = $MUCOM88_Dir + $BinName;
	call _DEBUG "[MUCOM88] 一時バイナリファイル削除：" + $BinPath;
	deletefile $BinPath;

	// 一時MMLをコンパイル
 	call _ComplMML $TmpMucPath, $BinPath;
	if( "0" == $$return ) goto END; // エラーなら終了

	call _DEBUG "[MUCOM88] 一時MMLのコンパイル完了。";


	//------------------------------
	// メイン処理
	//------------------------------

	// ファイル出力モードか確認
	if( 0 == strlen($Opt_FileOut) )
	{
		// 演奏モード。MUBファイルをMUCOM88で開く
		call _DEBUG "[MUCOM88] 演奏モード";
		call _ExcMucom "-d ", $BinPath, "演奏処理";
	}
	else
	{
		//----------------------------
		// ファイル出力処理
		//----------------------------

		// 過去に作成した出力ファイルは削除
		deletefile $OutFilePath;

		// MUCOM88を実行してWAVファイルを出力（演奏は行われない。）
		// ※付記：仮に長さ指定 -l を省略した場合は90秒固定の仕様。
		// ファイル出力モード。MUBファイルをMUCOM88で開く
		call _DEBUG "[MUCOM88] ファイル出力モード";
		call _ExcMucom $Opt_FileOut, $BinPath, "ファイル出力";

		// WAVファイルの存在チェック（ウイルス対策ソフトの影響で失敗する可能性もある）
		#Ret = existfile( $OutFilePath );
		if( false != #Ret )
		{
			beep; // アイコンが「？」だと無音なのでBeep 君はエターナル

			// 秒データからタイムスタンプを作成
			call _Sec2TimeSub val( $FileTimeStr );
			$FileTimeStmp = $$return;

			call _DEBUG "[ファイル出力モード] ファイル出力：" + $OutFilePath + " [" + $FileTimeStmp + "] (" + $FileTimeStr + "秒)";

			// WAVファイル出力ならユーザへの問い合わせ
			if( "WAV" == $DspFType )
			{
				$ErrMsg = $OutFilePath + " [" + $FileTimeStmp + "] (" + $FileTimeStr + "秒) を作成しました。\n"
						+ "ファイルを開きますか？";
				#Ret = message( $ErrMsg, $MacName,  (0x20|0x04) ); // (MB_ICONQUESTION | MB_YESNO
				// 「はい」が選択されたら関連付けで開く
				if( 6 == #Ret )
				{
					call _DEBUG "[ファイル出力モード] WAVファイルオープン：" + $OutFilePath;
					openbyshell $OutFilePath;
				}
			}
		}
		else
		{
			$ErrMsg = "\"" + $OutFilePath + "\" の作成に失敗しました。";
			call _DEBUG "[ファイル出力モード] 【エラー】ファイル作成失敗：" + $ErrMsg;
			message $ErrMsg, $MacName, 0x30;
			goto END;
		}

		// パラメータが変化していて、かつMMLファイルが書き込み可能であれば出力時間タグの再編集
		if( $FileTimeStr != $TagSts_OutTime )
		{
			if( (!readonly)&&(!browsemode) ) call _EditTag $Tag_OutTime, $FileTimeStr, #TimeTagLNo;

		}

		// ファイル出力モード終了
		call _DEBUG "[ファイル出力モード] 終了";
	}

	// パラメータが変化していて、かつMMLファイルが書き込み可能であればミュートタグの再編集
	if( $TagSts_Mute != $MuteEditStr )
	{
		if( (!readonly)&&(!browsemode) ) call _EditTag $Tag_Mute, $MuteEditStr, #MuteTagLNo;
	}

	END:

	// マクロ終了
	call _DEBUG "【マクロ終了】";

endmacro;
//================================================================================

//------------------------------
// 各サブルーチン
//------------------------------

// ****************************************
// コンパイル処理
//
//  call _ComplMML $$1, $$2;
//           $$1 MMLファイルのパス
//           $$2 MUBファイルのパス
//
// 戻り値：
//     $$RetSts "0":エラー  "1":成功
// ****************************************
_ComplMML:
{
	$MucPath = $$1;		// MMLファイルのパス
	$$BinPath = $$2;	// MUBファイルのパス

	// MMLのカレントディレクトリ
	$$CurDir = directory;
	$$Chk = rightstr( $$CurDir, 1 );
	if( "\\" != $$Chk ) $$CurDir = $$CurDir + "\\";

	// voiceタグチェック
	##Flg_VoiceNil  = 0; // voiceファイル不在フラグ
	##Flg_VoiceCopy = 0; // 標準voice補完フラグ
	if( 0 < strlen($TagSts_Voice) )
	{
		// voiceファイルの記述がある場合は存在チェック
		#Ret = existfile( $$CurDir + $TagSts_Voice );
		if( false == #Ret )
		{
			##Flg_VoiceNil = 1;
			call _DEBUG "[_ComplMML] カレントに存在しないvoiceファイル：" + $TagSts_Voice;

			// 指定ファイルが標準voiceファイルなら一時的にカレントへコピーして補完する
			if( $DefVoiceName == $TagSts_Voice )
			{
				// mucom88.exeのフォルダに存在するか確認
				#Ret = existfile( $MUCOM88_Dir + $DefVoiceName );
				if( false != #Ret )
				{
					// コンパイル後の削除フラグを立てる
					##Flg_VoiceCopy = 1;

					// 標準voiceファイルのコピー
					call _DEBUG "[_ComplMML] " + $TagSts_Voice + "の補完を行います。";
					call _CopyFile $MUCOM88_Dir + $DefVoiceName, $$CurDir + $DefVoiceName;
				}
			}
		}
	}

	// pcmタグチェック
	##Flg_PcmNil  = 0; // pcmファイル不在フラグ
	##Flg_PcmCopy = 0; // 標準pcm補完フラグ
	if( 0 < strlen($TagSts_Pcm) )
	{
		// pcmファイルの記述がある場合は存在チェック
		#Ret = existfile( $$CurDir + $TagSts_Pcm );
		if( false == #Ret )
		{
			##Flg_PcmNil = 1;
			call _DEBUG "[_ComplMML] カレントに存在しないpcmファイル：" + $TagSts_Pcm;

			// 指定ファイルが標準pcmファイルなら一時的にカレントへコピーして補完する
			if( $DefPcmName == $TagSts_Pcm )
			{
				// mucom88.exeのフォルダに存在するか確認
				#Ret = existfile( $MUCOM88_Dir + $DefPcmName );
				if( false != #Ret )
				{
					// コンパイル後の削除フラグを立てる
					##Flg_PcmCopy = 1;

					// 標準pcmファイルのコピー
					call _DEBUG "[_ComplMML] " + $TagSts_Pcm + "の補完を行います。";
					call _CopyFile $MUCOM88_Dir + $DefPcmName, $$CurDir + $DefPcmName;
				}
			}
		}
	}

	// -cオプションはコンパイルと同時に演奏するため、 -gオプションで「コンパイルのみ」を指定
	$$ExcStr = "\"" + $AppPath + "\"" + " -o " + "\"" + $$BinPath + "\"" + " -g " + "\"" + $MucPath + "\"";
	call _DEBUG "[_ComplMML] コンパイル実行：" + $$ExcStr;
	runex $$ExcStr, 1, // ファイル名, 同期フラグ
			0, "",    // 標準入力フラグ, 標準入力ファイル名
			7, "",    // 標準出力フラグ, 標準出力ファイル名
			7, "",    // 標準エラー出力フラグ, 標準エラー出力ファイル名
			0, "",    // 作業フォルダフラグ, 作業フォルダ名
			1, 1, 0, 0; // 表示フラグ, 非描画フラグ, エンコード, 拡張フラグ
	// ※実行結果はアウトプット枠に出力される


	// バイナリファイルの存在チェック
	// ※ウイルス対策ソフトの影響で失敗する可能性もある
	#Ret = existfile( $$BinPath );
	if( false == #Ret )
	{
		call _JumpErrLine;
		$$ErrMsg = $$return;

		if( "" ==  $$ErrMsg )
		{
			// 不明なエラー
			$ErrMsg = "MMLのコンパイルに失敗しました。（アウトプット枠の情報を確認してください）";
		}
		else
		{
			// MUCOM88側が出力したエラーを表示する
			$ErrMsg = "MMLのコンパイルに失敗しました。\n\n" + $$ErrMsg;
		}
		call _DEBUG "[_ComplMML] 【エラー】一時バイナリファイルなし：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x10;

		$$RetSts = "0";
	}
	else
	{
		$$RetSts = "1";

		// コンパイル成功。
		call _DEBUG "[_ComplMML] コンパイルOK。（【選択ドライバ】" + $DriverName + "）";
	}

	// 標準voiceファイルを一時的にコピーしていたら削除
	if( 0 < ##Flg_VoiceCopy )
	{
		// カレントから削除（最初から存在する場合は対象外）
		deletefile $$CurDir + $DefVoiceName;
		call _DEBUG "[_ComplMML] 一時voiceファイル " + $DefVoiceName + " を削除。";

		// ファイル不在フラグはキャンセル
		##Flg_VoiceNil = 0;
	}

	// 標準pcmファイルを一時的にコピーしていたら削除
	if( 0 < ##Flg_PcmCopy )
	{
		// カレントから削除（最初から存在する場合は対象外）
		deletefile $$CurDir + $DefPcmName;
		call _DEBUG "[_ComplMML] 一時pcmファイル " + $DefPcmName + " を削除。";

		// ファイル不在フラグはキャンセル
		##Flg_PcmNil = 0;
	}

	// voiceタグおよびpcmタグの警告処理
	if( (##Flg_VoiceNil != 0)||(##Flg_PcmNil != 0) )
	{
		$ErrMsg = "";
		if( $$RetSts == "1" ) $ErrMsg = "コンパイルは成功しましたが、";
		$ErrMsg = $ErrMsg + "MMLにタグで指定されているファイル ";
		if( ##Flg_VoiceNil != 0 ) $ErrMsg = $ErrMsg + "\"" + $TagSts_Voice + "\"";
		if(( ##Flg_VoiceNil != 0 )&&(  ##Flg_PcmNil != 0 ) ) $ErrMsg = $ErrMsg + "および";
		if( ##Flg_PcmNil != 0 ) $ErrMsg = $ErrMsg + "\"" + $TagSts_Pcm + "\"";
		$ErrMsg = $ErrMsg + "がMMLファイルと同じフォルダに存在しません。";

		call _DEBUG "[_ComplMML] 【警告】：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x30;
	}

	return $$RetSts;
}


// ****************************************
// MUCOM実行処理
//
//  call _ExcMucom $$1, $$2, $$3;
//           $$1 オプション
//           $$2 MUBファイルのパス
//           $$3 処理名
//
// 戻り値：
//     なし
// ****************************************
_ExcMucom:
{
	$$OptStr  = $$1;
	$$BinPath = "\"" + $$2 + "\"";
	$$PrcName = $$3;
	$$AppPath = "\"" + $AppPath + "\""; // 実行ファイルのパスを「“ ”」で括る

	// リズム音源ファイルのパスを作成（末尾の\は取る）
	$$RythPath = "\"" + leftstr( $MUCOM88_Dir, strlen($MUCOM88_Dir) -1 ) + "\"";

	// 引数のログ
	call _DEBUG "[_ExcMucom] パラメータ：$$OptStr=" + $$OptStr + ", $$BinPath=" + $$BinPath + ", $$PrcName=" + $$PrcName;

	// MMLのカレントディレクトリ
	$$CurDir = directory;
	$$Chk = rightstr( $$CurDir, 1 );
	if( "\\" != $$Chk ) $$CurDir = $$CurDir + "\\";
	call _DEBUG "[_ExcMucom] カレントディレクトリを確認：$$CurDir=" + $$CurDir;

	// 一時的にカレントディレクトリを実行ファイルがあるフォルダに変更
	//call _SetCurDir $MUCOM88_Dir;

	//--------------------
	// 実行処理
	//--------------------
	// MUCOM88にMUBファイルを渡して演奏を開始（rオプションでリズム音源ファイルの場所を指定）
	$$ExcStr = $$AppPath + " " + $$OptStr + $$BinPath + " -r " + $$RythPath;
	call _DEBUG "[_ExcMucom] " + $$PrcName + "実行：" + $$ExcStr;
	##Start_Tk = tickcount;
	runsync2 $$ExcStr; // アイコンの状態にしないで待機(sync2)

	// ユーザがDOS窓を閉じたら経過時間（秒）を算出
	##End_Tk = tickcount;
	$$Play_Time = str((##End_Tk - ##Start_Tk) / 1000);
	call _DEBUG "[_ExcMucom] " + $$PrcName + "終了：経過時間 " + $$Play_Time + "秒";

	//カレントディレクトリを元に戻す
	//call _SetCurDir $$CurDir;

	return;
}

//****************************************
//   一時ファイル用にMMLを丸コピーする
//
//  call _SetMmlTxt;
//
// 戻り値：
//         ※グローバル変数 $MML_Txt
//****************************************
_SetMmlTxt:
{
	//------------------------------
	// 一時ファイル作成の準備
	//------------------------------
	// カーソルの現在位置を保存
	##Cr_X = x;
	##Cr_Y = y;

	// ファイル内のテキストを丸コピー
	gofiletop;
	##Top_X = x;
	##Top_Y = y;
	gofileend;
	##End_X = x;
	##End_Y = y;
	$MML_Txt = gettext( ##Top_X, ##Top_Y, ##End_X, ##End_Y );

	// カーソルを復帰
	moveto ##Cr_X, ##Cr_Y;

	return;
}

//****************************************
//   MMLタグの検索およびパラメータの取得
//
//  call _GetMmlTag $$1, ##2;
//           $$1 検索するタグ
//           ##2 最大ループカウント
//
// 戻り値：
//     成功した場合は、パラメータ文字列
//     パラメータだけ存在しない場合は " "
//     タグが存在しない場合は空の文字列
//
// ※グローバル変数 $MML_Txt, #FoundLineNo
//****************************************
_GetMmlTag:
{
	$$FindTag = $$1;
	##LoopMax = ##2;
	call _DEBUG "[_GetMmlTag] タグ検索開始：$$FindTag=" + $$FindTag;

	$$RetStr  = "";
	$$SeekChr = "\n"; // 区切り文字
	##SetPos  = 0;
	$$LineStr = "";
	$$RetStr = "";

	##i = 0;
	while( ##i < ##LoopMax )
	{
		// １行ずつ切り出していく
		##SeekPos = strstr( $MML_Txt, $$SeekChr, ##SetPos );
		if( 0 <= ##SeekPos )
		{
			// １行取得（行末の\n は含めない）
			$$LineStr = midstr( $MML_Txt, ##SetPos, ##SeekPos - (##SetPos + 1) ); //区切り文字のひとつ後ろまで

			// タグを検索
			call _FindTag $$LineStr, $$FindTag;
			if( 0 < strlen( $$return ) )
			{
				$$RetStr = $$return;	// 一致したタグを取得
				#FoundLineNo = ##i;		// 取得位置を保存（タグ再編集用）
				##i = ##LoopMax;		// ループ脱出
			}
		}
		else
		{
			//------------------------------
			// 改行が見つからない場合
			//------------------------------
			// 最後の行
			$$LineStr = midstr( $MML_Txt, ##SetPos );

			// タグを検索
			call _FindTag $$LineStr, $$FindTag;
			if( 0 < strlen( $$return ) )
			{
				$$RetStr = $$return;	// 一致したタグを取得
				#FoundLineNo = ##i;		// 取得位置を保存（タグ再編集用）
				##i = ##LoopMax;		// 念のため
			}
		}

		##SetPos = ##SeekPos + 1; // 次の検索の準備
		##i = ##i + 1;
	}

	// 目的のタグを検出済みであれば、パラメータを取得
	if( 0 < strlen( $$RetStr ) )
	{
		$$RetStr = midstr( $$RetStr, strlen( $$FindTag ) );

		// 前後の余白を削除
		call _TrmSub $$RetStr;
		$$RetStr = $$return;

		// タグが存在しつつパラメータは存在しない場合、半角スペースを返す
		if( 0 == strlen( $$RetStr ) )
		{
			$$RetStr= " ";
			call _DEBUG "[_GetMmlTag] " + $$FindTag + "タグのみ検出。パラメータなし";
		}
		else
		{
			call _DEBUG "[_GetMmlTag] " + $$FindTag + "タグを検出。 $$RetStr=" + $$RetStr;
		}
	}
	else
	{
		call _DEBUG "[_GetMmlTag] タグ未検出";
	}


	return( $$RetStr );
}

//****************************************
//   文字列からタグ検索
//
//  call _FindTag $$1, $$2
//           $$1 検索元の文字列
//           $$2 検索するタグ
//
//  戻り値：
//      成功した場合はコマンドを含めた後続の数字文字列
//      検索文字が存在しない場合は空の文字列
//****************************************
_FindTag:
{
	$$SrcStr = $$1;  // 検索元の文字列
	$$TagStr = $$2;  // 検索するタグ
	$$RetStr = "";

	// コメント部分の切り捨て
	##ComtPos = strstr( $$SrcStr, ";" );
	if( 0 <= ##ComtPos ) $$SrcStr = midstr( $$SrcStr, 0, ##ComtPos );

	// タグを検索
	##FindPos = strstr( $$SrcStr, $$TagStr );
	if( 0 <= ##FindPos )
	{
		// 一致した文字列と後続の数字を取得
		$$RetStr = midstr( $$SrcStr, ##FindPos );
	}

	return $$RetStr;
}

//****************************************
// 時間設定のメニューを表示
//
//  call _DspSetTime $$1, ##2, ##3, ##4;
//           $$1 キャプション
//           ##2 最小値
//           ##3 最大値
//           ##4 初期値
//
// 戻り値：
//     確定した時間（秒）の文字列
//     （キャンセルなら空欄）
//****************************************
_DspSetTime:
{
	$$CapStr = $$1; // キャプション
	##MinSec = ##2; // 最小値
	##MaxSec = ##3; // 最大値
	##DefVal = ##4;	// 初期値
	##MnRet = 2;	// メニューの結果（セパレータの値をセット）
	$$RetStr = "";	// 戻り値

	// 入力中の秒数に初期値をセット
	##InpVal = ##DefVal;

	// ファイル出力秒数のユーザ入力メニューを表示（ループ処理）
	while((1 < ##MnRet)&&(##MnRet < 6) )
	{
		call _Sec2TimeSub ##InpVal;
		$$DspTime = $$return;

		menu
			$$CapStr + " [" + $$DspTime +"] (" + str(##InpVal) + "秒)",
			"\x01",
			"&> : 1秒増やす ｜ Shift+ > : 10秒増やす",
			"&< : 1秒減らす ｜ Shift+ < : 10秒減らす",
			"リセット(&R)",
			"決定(&O)",
			"キャンセル(&X)"; // ##MnRet = 7

		##MnRet = result;
		if( 3 == ##MnRet )
		{
			// (>)加算
			if( iskeydown( 0x10 ) ) ##InpVal = ##InpVal + 10;
			else ##InpVal = ##InpVal + 1;
			if(9999 < ##InpVal) ##InpVal = 9999;
		}
		else if( 4 == ##MnRet )
		{
			// (<)減算
			if( iskeydown( 0x10 ) ) ##InpVal = ##InpVal - 10;
			else ##InpVal = ##InpVal - 1;
			if(0 > ##InpVal) ##InpVal = 0;
		}
		else if( 5 == ##MnRet )
		{
			// (R)リセット
			##InpVal = ##DefVal;
		}
		else if( (1 == ##MnRet)||(6 == ##MnRet) )
		{
			// (O)決定
			$$RetStr = str( ##InpVal );
		}
		else if( 7 == ##MnRet)
		{
			// (X)キャンセル
			##MnRet = 0; // ZEROで上書き
		}
	}

	return $$RetStr;
}

//****************************************
// テキスト上でタグの編集（未保存）
//
//  call _EditTag $$1, $$2;
//           $$1 対象のタグ
//           $$2 設定するパラメータ
//           ##3 編集行（1行目が0）
//
// 戻り値：
//     なし
//****************************************
_EditTag:
{
	$$TagName = $$1;
	$$SetParm = $$2;
	##LineNo  = ##3;

	// タグを検出した位置へ移動
	moveto2 0,##LineNo + 1;
	$$TagLine = gettext2( 0,##LineNo + 1, linelen2,##LineNo + 1 );

	// コメントチェック
	#EndPos = strstr( $$TagLine, ";" );
	if( 0 <= #EndPos )
	{
		// タグの終端はコメントの手前までとする
		$SepStr = " "; // 間隔を空ける
	}
	else
	{
		// コメントがなければ行末までタグ扱い
		#EndPos = linelen2;
		$SepStr = ""; // 間隔なし
	}

	// タグのパラメータを設定値で上書き（保存はしない）
	beginsel;
	moveto2 #EndPos,##LineNo + 1;
	endsel;
	$$InsTxt = $$TagName + " " + $$SetParm + $SepStr;
	insert $$InsTxt;
	call _DEBUG "[_EditTag] タグ編集：$$InsTxt=" + $$InsTxt + " (" + str(##LineNo + 1) + "行目)";

	return;
}

//****************************************
// 前後の余白を削除
//
//  call _TrmSub $$1;
//           $$1 前後に余白がある文字列
//
// 戻り値：
//     前後の余白を削除後の文字列
//****************************************
_TrmSub:
{
	$RetStr = $$1;

	// 前方（左）の余白を削除
	call _LTrmSub( $RetStr );
	$RetStr = $$return;

	// 後方（右）の余白を削除
	call _RTrmSub( $RetStr );
	$RetStr = $$return;      // 返値を取得

	// 余白を削除後の文字列を返して終了
	return( $RetStr );
}

//****************************************
// 前方（左）の余白を削除
//
//  call _LTrmSub $$1;
//           $$1 左に余白がある文字列
//
// 戻り値：
//     前方の余白を削除後の文字列
//****************************************
_LTrmSub:
{
	$InStr  = $$1; // 入力文字を取得
	while( ( " " == leftstr( $InStr , 1 ) )&&( 0 != strlen( $InStr ) ) )
	{
		$InStr = rightstr( $InStr , strlen( $InStr ) - 1 );
	}

	return( $InStr );
}

// ****************************************
// 後方（右）の余白を削除
//
//  call _RTrmSub $$1;
//           $$1 右に余白がある文字列
//
// 戻り値：
//     後方の余白を削除後の文字列
// ****************************************
_RTrmSub:
{
	$InStr  = $$1; // 入力文字を取得
	while( ( " " == rightstr( $InStr , 1 ) )&&( 0 != strlen( $InStr ) ) )
	{
		$InStr = leftstr( $InStr , strlen( $InStr ) - 1 );
	}

	return( $InStr );
}

// ****************************************
// 秒データからタイムスタンプに変換
//
//  call _Sec2TimeSub ##1;
//           ##1 秒単位のデータ
//
// 戻り値：
//     hh:mm:nn 形式の文字列
// ****************************************
_Sec2TimeSub:
{
	##SrcSec = ##1;

	##Hour = ##SrcSec / (60 * 60);
	##Min = (##SrcSec - (##Hour * 60 * 60)) / 60;
	##Sec = ##SrcSec - (##Hour * 60 * 60) - (##Min * 60);

	$TimeStr = str(##Hour) + ":" + rightstr( "00" + str(##Min), 2 ) + ":" + rightstr( "00" + str(##Sec), 2 );
	return $TimeStr;
}

// ****************************************
// ミュート表示の切り替え操作
//
//  call _MuteDspChg ##1;
//           ##1 対象のトラック（0～10）
//              ※ -1  リセット（全解除）
//              ※ -10 全ミュート
// 戻り値：
//     なし
// ****************************************
_MuteDspChg:
{
	##TrIdx = ##1;

	
	if( ##TrIdx == -1 )
	{
		// リセット要求ならオール解除
		##i = 0;
		while( ##i < 11 )
		{
			$DspMuteF[##i] = "●";
			##i = ##i + 1;
		}
	}
	else if( ##TrIdx == -10 )
	{
		// 全ミュート
		##i = 0;
		while( ##i < 11 )
		{
			$DspMuteF[##i] = "－";
			##i = ##i + 1;
		}
	}
	else
	{
		// 個別トラックを反転動作
		if( "●" == $DspMuteF[##TrIdx] ) $DspMuteF[##TrIdx] = "－";
		else $DspMuteF[##TrIdx] = "●";
	}

	return;
}


//****************************************
//   MMLからテンポ設定を取得
//
//  call _GetTempo ##1;
//           ##1 最大ループカウント
//
// 戻り値：
//     成功した場合は "t???" または "T???"
//     テンポ設定が存在しない場合は空の文字列
//
// ※グローバル変数 $MML_Txt, #FoundLineNo は参照専用
//****************************************
_GetTempo:
{
	##LoopMax = ##1;

	$$RetStr  = "";
	$$SepChr = "\n"; // 区切り文字
	##SetPos  = 0;
	$$LineStr = "";

	##i = 0;
	while( ##i < ##LoopMax )
	{
		// １行ずつ切り出していく
		##SeekPos = strstr( $MML_Txt, $$SepChr, ##SetPos );
		if( 0 <= ##SeekPos )
		{
			// １行取得
			$$LineStr = midstr( $MML_Txt, ##SetPos, ##SeekPos - ##SetPos );

			// タグ以外を検索
			if( "#" != leftstr( $$LineStr, 1 ) )
			{
				call _FindTempo $$LineStr;
				if( 0 < strlen( $$return ) )
				{
					// 見つけたらループを脱出
					$$RetStr = $$return;
					call _DEBUG "_GetTempo テンポ取得(" + str(##i + 1) + "行目)：$$RetStr=" + $$RetStr;
					##i = ##LoopMax;
				}
			}
		}
		else
		{
			//------------------------------
			// 改行が見つからない場合
			//------------------------------
			// 最後の行
			$$LineStr = midstr( $MML_Txt, ##SetPos );

			// タグ以外を検索
			if( "#" != leftstr( $$LineStr, 1 ) )
			{
				call _FindTempo $$LineStr;
				if( 0 < strlen( $$return ) )
				{
					// 見つけたらループを脱出
					$$RetStr = $$return;
					call _DEBUG "_GetTempo テンポ取得(" + str(##i + 1) + "行目)：$$RetStr=" + $$RetStr;
					##i = ##LoopMax;
				}
			}
		}

		##SetPos = ##SeekPos + 1; // 次の検索の準備

		##i = ##i + 1;
	}

	return( $$RetStr );
}

//****************************************
//   文字列からテンポを検索
//
//  call _FindTempo $$1
//           $$1 検索元の文字列
//
//  戻り値：
//      成功した場合はコマンドを含めた後続の数字文字列
//      検索文字が存在しない場合は空の文字列
//****************************************
_FindTempo:
{
	$$SrcStr = $$1;  // 検索元の文字列
	$$FindStr = "";
	$$RetStr = "";

	// コメント部分の切り捨て
	##ComtPos = strstr( $$SrcStr, ";" );
	if( 0 <= ##ComtPos ) $$SrcStr = midstr( $$SrcStr, 0, ##ComtPos );

	// 目的の文字列を検索
	// Timer-B
	##FindPos = strstr( $$SrcStr, "t" );
	if( 0 <= ##FindPos )
	{
		// 一致した文字列と後続の数字を取得
		$$FindStr = midstr( $$SrcStr, ##FindPos );
	}
	else
	{
		// Tコマンド
		##FindPos = strstr( $$SrcStr, "T" );
		if( 0 <= ##FindPos )
		{
			// 一致した文字列と後続の数字を取得
			$$FindStr = midstr( $$SrcStr, ##FindPos );
		}
	}

	// t（もしくはT）コマンドの後ろにあると思われる数値を取得
	if( 0 < strlen($$FindStr) )
	{
		$$RetStr = leftstr( $$FindStr, 1 );
		##i = 0;

		// 取得する数値は3桁以内
		while( ##i < 3 )
		{
			$$Chr = midstr( $$FindStr, ##i + 1, 1 );
			if( ( "0" <= $$Chr )&&( $$Chr <= "9" ) )
			{
				$$RetStr = $$RetStr + $$Chr;
			}
			else
			{
				// 後ろが数字でなければ「取得失敗」
				if( 0 == ##i ) $$RetStr = "";
				call _DEBUG "debug _FindTempo $$FindStr=" + $$FindStr;
				##i = 3; // ループ脱出
			}

			##i = ##i + 1;
		}
	}

	return $$RetStr;
}


// ****************************************
// 新規MMLの補完
//
//  call _EditNewMML;
//
// 戻り値：
//     なし
// ****************************************
_EditNewMML:
{
	call _DEBUG "[MUCOM88] MML新規作成モード";

	// MMLタグの記述がある場合のみ処理する
	moveto 0,0;
	searchdown "#MML", nocasesense;
	if( result < 1 ) return;


	// 行頭の空白を削除
	disabledraw;                // 「処理中」は表示しない
	setcompatiblemode 0x20000;  // マクロ終了後に検索条件をリセットする
	replaceallfast "^[ |　]*", "", regular;
	enabledraw;
	
	// １行ずつ補完していく
	##LineNo = 0;
	while( ##LineNo < linecount )
	{
		// 行頭2文字を取得
		moveto 0,##LineNo;
		$$Line = gettext2( 0,##LineNo + 1, 2,##LineNo + 1 );
		$$Chr1 = midstr( $$Line, 0, 1 );
		$$Chr2 = midstr( $$Line, 1, 1 );

		// トラック名の記述かどうかを確認
		if(   ( $$Chr1 != "A" )
			&&( $$Chr1 != "B" )
			&&( $$Chr1 != "C" )
			&&( $$Chr1 != "D" )
			&&( $$Chr1 != "E" )
			&&( $$Chr1 != "F" )
			&&( $$Chr1 != "G" )
			&&( $$Chr1 != "H" )
			&&( $$Chr1 != "I" )
			&&( $$Chr1 != "J" )
			&&( $$Chr1 != "K" )
			&&( $$Chr2 != " " ) ) $$Chr2 = "";

		// コメントやタグ以外はトラック名を挿入
		if ( $$Chr2 == "" )
		{
			if( ($$Chr1 != "#")&&($$Chr1 != ";") ) insert "A ";
		}

		##LineNo = ##LineNo + 1;
	}

	// テンポ、音色、ボリューム、オクターブの補完
	$$AddTxt = "";
	moveto 0,0;
	searchdown "t[1-9]", casesense, regular;
	if( result == false ) $$AddTxt = $$AddTxt + "t210";

	moveto 0,0;
	searchdown "@[0-9]", casesense, regular;
	if( result == false ) $$AddTxt = $$AddTxt + "@90";

	moveto 0,0;
	searchdown "v[1-9]", casesense, regular;
	if( result == false ) $$AddTxt = $$AddTxt + "v15";

	moveto 0,0;
	searchdown "o[1-8]", casesense, regular;
	if( result == false ) $$AddTxt = $$AddTxt + "o5";

	moveto 0,0;
	insert "A " + $$AddTxt + "\n";

	return;
}


// ****************************************
// カレントディレクトリの変更
//
//  call _SetCurDir $$1;
//           $$1 フォルダのパス
//
// 戻り値：
//     なし
// ****************************************
_SetCurDir:
{
	//シェルオブジェクトの作成
	##Obj = createobject("WScript.Shell");
	if(##Obj == 0)
	{
		$ErrMsg = "オブジェクトの作成に失敗しました。";
		call _DEBUG "[_SetCurDir] 【エラー】：" + $ErrMsg;
		message $ErrMsg, $MacName, 0x30;
		endmacro;
	}
	//カレントディレクトリを変更
	setpropstr ##Obj, "CurrentDirectory", $$1;
	if(!result)
	{
		$ErrMsg = "カレントディレクトリの変更に失敗しました。";
		call _DEBUG "[_SetCurDir] 【エラー】：" + $ErrMsg;
	}

	// 作成したオブジェクトを解放
	releaseobject ##Obj;

	return;
}


// ****************************************
// ファイルのコピー
//
//  call _CopyFile $$1, $$2;
//           $$1 コピー元のパス
//           $$2 コピー先のパス
//
// 戻り値：
//     なし
// ****************************************
_CopyFile:
{
	$$SrcPath  = $$1; // コピー元のパス
	$$CopyPath = $$2; // コピー先のパス

	call _DEBUG "[_CopyFile] コピー元：" + $$SrcPath + ", コピー先：" + $$CopyPath;

	// ファイルシステムオブジェクトの作成
	##Obj = createobject("Scripting.FileSystemObject");

	// ファイルコピーを実行
	callmethod ##Obj, "CopyFile", $$SrcPath, $$CopyPath;
	if(!result)
	{
		$ErrMsg = "ファイルのコピーに失敗しました。";
		call _DEBUG "[_CopyFile] 【エラー】：" + $ErrMsg;
	}

	// 作成したオブジェクトを解放
	releaseobject ##Obj;

	return;
}

// ****************************************
// コンパイルエラーの行にジャンプする
//
//  call _JumpErrLine;
//
// 戻り値：
//     MUCOM88が出力したエラーメッセージ
// ****************************************
_JumpErrLine:
{
	$$RetStr = "";

	// アウトプット枠にフォーカスを移動
	setfocus 5;

	// アウトプット枠に「すべてコピー」のコマンドを送信
	loaddll "HmOutputPane.dll";
	##Hnd = dllfunc( "GetWindowHandle",hidemaruhandle(0) );
	##Ret = sendmessage( ##Hnd, 0x111, 1013, 0 );
	freedll;

	// クリップボードからエラー行を検索（試行するのは最大で1024行とする）
	//call _DEBUG "[_JumpErrLine] エラーの検索を開始";
	beginclipboardread;
	##i = 0;
	$$SeekStr    = "#error ";
	$$ErrLineStr = "";
	$$ClpStr     = "dummy";

	while( ($$ClpStr != "") && (##i < 1024) ) 
	{
	    $$ClpStr  = getclipboard;
		##FindPos = strrstr( $$ClpStr, $$SeekStr );
		if( -1 < ##FindPos )
		{
			//call _DEBUG "[_JumpErrLine] エラー行を検出。 $$ClpStr=" + $$ClpStr;

			// エラー行を見つけたらメッセージも取得して終了
			$$ErrLineStr = $$ClpStr;
		    $$ErrMsgStr  = getclipboard;
			$$ClpStr = "";
		}

	    ##i = ##i + 1;
	}

	if( "" == $$ErrLineStr )
	{
		//message "アウトプット枠でエラー行がみつかりません。";
		return $$RetStr;
	}

	// 検出したエラー内容をセット
	$$RetStr = $$ErrLineStr + "\n" + $$ErrMsgStr;

	// エラー行の行番号のみを抜き出す
	$$SeekStr    = "in line ";
	##FindPos = strstr( $$ErrLineStr, $$SeekStr );
	$$ErrLineNo = midstr( $$ErrLineStr, ##FindPos + strlen($$SeekStr) );
	$$ErrLineNo = midstr( $$ErrLineNo, 0, strlen($$ErrLineNo) - 1 );

	// エラー行にジャンプして選択状態で強調する
	##ErrLineNo = val($$ErrLineNo);
	if( ##ErrLineNo <= linecount2 )
	{
		movetolineno 1, ##ErrLineNo; 
		selectline;
	}
	else
	{
		// 「A *10 M1」などと記述すると、エラー番号9 行番号 13312 が出力される 20/05/16
		$$RetStr = $$RetStr + "\n\n（※行番号が異常です。エラー箇所はMMLで使用しているマクロの後方あるいはマクロ内部にあるかもしれません。）";	}

	return $$RetStr;
}


// ****************************************
// デバッグ情報の出力
//
//  call _DEBUG $$1;
//           $$1 デバッグメッセージ（改行なし）
//
// 戻り値：
//     なし
// ****************************************
_DEBUG:
{
	debuginfo 2; // 「アウトプット枠にも出力」
	// [YYYY/MM/DD hh:mm:ss] (macro_filename) message
	$$Mes = "[" + year + "/" + month + "/" + day + " " + time + "](" + $MacName + ") " + $$1 + "\x0a";

	// OutputDebugStringによるメッセージの送信
	debuginfo $$Mes;
	debuginfo 0;
	return;
}

